"""
Teste de detec√ß√£o autom√°tica de dom√≠nio
======================================

Script para verificar se o sistema detecta automaticamente o dom√≠nio da requisi√ß√£o
"""

import asyncio
import sys
import os

# Simular objeto de requisi√ß√£o FastAPI
class MockRequest:
    def __init__(self, scheme="http", host="localhost:8000", headers=None):
        self.url = MockURL(scheme)
        self.headers = headers or {"host": host}
        self.client = MockClient()

class MockURL:
    def __init__(self, scheme="http"):
        self.scheme = scheme

class MockClient:
    def __init__(self):
        self.host = "localhost"

def test_create_pdf_urls():
    """
    Testa a fun√ß√£o create_pdf_urls com diferentes configura√ß√µes de dom√≠nio
    """
    # Importar a fun√ß√£o do main
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    from main import create_pdf_urls
    
    print("üß™ Testando detec√ß√£o autom√°tica de dom√≠nio...")
    
    # Teste 1: Localhost padr√£o
    print("\nüìå Teste 1: Localhost padr√£o")
    request1 = MockRequest()
    urls1 = create_pdf_urls("reports/teste.pdf", request1)
    print(f"   Download URL: {urls1.get('pdf_download_url')}")
    print(f"   Static URL: {urls1.get('pdf_static_url')}")
    
    # Teste 2: Dom√≠nio customizado
    print("\nüìå Teste 2: Dom√≠nio customizado")
    request2 = MockRequest(host="api.smartbi.com")
    urls2 = create_pdf_urls("reports/teste.pdf", request2)
    print(f"   Download URL: {urls2.get('pdf_download_url')}")
    print(f"   Static URL: {urls2.get('pdf_static_url')}")
    
    # Teste 3: HTTPS com proxy (x-forwarded-proto)
    print("\nüìå Teste 3: HTTPS com proxy")
    headers3 = {"host": "api.smartbi.com", "x-forwarded-proto": "https"}
    request3 = MockRequest(headers=headers3)
    urls3 = create_pdf_urls("reports/teste.pdf", request3)
    print(f"   Download URL: {urls3.get('pdf_download_url')}")
    print(f"   Static URL: {urls3.get('pdf_static_url')}")
    
    # Teste 4: Heroku/Railway/Render (porta impl√≠cita)
    print("\nüìå Teste 4: Deploy em produ√ß√£o")
    headers4 = {"host": "smartbi-api.herokuapp.com", "x-forwarded-proto": "https"}
    request4 = MockRequest(headers=headers4)
    urls4 = create_pdf_urls("reports/teste.pdf", request4)
    print(f"   Download URL: {urls4.get('pdf_download_url')}")
    print(f"   Static URL: {urls4.get('pdf_static_url')}")
    
    # Teste 5: Sem PDF (deve retornar dict vazio)
    print("\nüìå Teste 5: Sem PDF")
    urls5 = create_pdf_urls(None, request1)
    print(f"   URLs vazias: {urls5}")
    
    print("\n‚úÖ Todos os testes de detec√ß√£o de dom√≠nio conclu√≠dos!")
    
    # Verificar se as URLs est√£o corretas
    assert "http://localhost:8000" in urls1["pdf_download_url"]
    assert "http://api.smartbi.com" in urls2["pdf_download_url"]  
    assert "https://api.smartbi.com" in urls3["pdf_download_url"]
    assert "https://smartbi-api.herokuapp.com" in urls4["pdf_download_url"]
    assert len(urls5) == 0
    
    print("üéâ Valida√ß√£o das URLs bem-sucedida!")

def test_url_patterns():
    """
    Testa diferentes padr√µes de URL que podem ocorrer em produ√ß√£o
    """
    from main import create_pdf_urls
    
    print("\nüß™ Testando padr√µes de URL em produ√ß√£o...")
    
    production_scenarios = [
        {
            "name": "Vercel",
            "headers": {"host": "smartbi-api.vercel.app", "x-forwarded-proto": "https"}
        },
        {
            "name": "Netlify",
            "headers": {"host": "smartbi-api.netlify.app", "x-forwarded-proto": "https"}
        },
        {
            "name": "Railway",
            "headers": {"host": "smartbi-api.up.railway.app", "x-forwarded-proto": "https"}
        },
        {
            "name": "Render",
            "headers": {"host": "smartbi-api.onrender.com", "x-forwarded-proto": "https"}
        },
        {
            "name": "Docker local",
            "headers": {"host": "192.168.1.100:8000"}
        }
    ]
    
    for scenario in production_scenarios:
        print(f"\nüìç {scenario['name']}:")
        request = MockRequest(headers=scenario["headers"])
        urls = create_pdf_urls("reports/analysis_20241007.pdf", request)
        print(f"   Download: {urls.get('pdf_download_url')}")
        print(f"   Static: {urls.get('pdf_static_url')}")
    
    print("\n‚úÖ Testes de padr√µes de produ√ß√£o conclu√≠dos!")

if __name__ == "__main__":
    test_create_pdf_urls()
    test_url_patterns()