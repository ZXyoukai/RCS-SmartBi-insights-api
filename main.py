"""
SmartBI Assistant - An√°lise de Dados com Google Gemini
=====================================================

Sistema de an√°lise de dados que utiliza a API do Google Gemini para gerar 
insights estrat√©gicos de neg√≥cios a partir de bases de dados ou arquivos CSV.

Autor: SmartBI Team
Vers√£o: 2.0.0
Data: 2025
"""

from fastapi import FastAPI, File, UploadFile, HTTPException, Body
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import os
import logging
from pathlib import Path
from dotenv import load_dotenv

# Importa√ß√µes dos m√≥dulos locais
from gemini_analyzer import GeminiAnalyzer
from data_processor import DataProcessor
from database_connector import DatabaseConnector
from models import DatabaseConnectionRequest, AnalysisResponse, SpecificInsightRequest, SpecificInsightResponse

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Inicializa a aplica√ß√£o FastAPI
app = FastAPI(
    title="SmartBI Assistant",
    description="Sistema de an√°lise de dados com Google Gemini para insights estrat√©gicos de neg√≥cios",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especifique dom√≠nios espec√≠ficos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Diret√≥rio para arquivos tempor√°rios
TEMP_DIR = Path("temp")
TEMP_DIR.mkdir(exist_ok=True)

# Inicializar servi√ßos
try:
    gemini_analyzer = GeminiAnalyzer()
    data_processor = DataProcessor()
    database_connector = DatabaseConnector()
    logger.info("‚úÖ Servi√ßos inicializados com sucesso")
except Exception as e:
    logger.error(f"‚ùå Erro ao inicializar servi√ßos: {e}")
    raise


@app.get("/")
async def root():
    """
    Endpoint raiz com informa√ß√µes da API
    """
    return {
        "name": "SmartBI Assistant",
        "version": "2.0.0",
        "description": "An√°lise de dados com Google Gemini",
        "status": "online",
        "endpoints": {
            "/": "GET - Informa√ß√µes da API",
            "/upload": "POST - Upload de arquivo para an√°lise",
            "/analyze-database": "POST - An√°lise via conex√£o com base de dados",
            "/specific-insights": "POST - Insights estrat√©gicos espec√≠ficos baseados em solicita√ß√£o",
            "/health": "GET - Status de sa√∫de da aplica√ß√£o",
            "/docs": "GET - Documenta√ß√£o interativa (Swagger)",
            "/redoc": "GET - Documenta√ß√£o alternativa (ReDoc)"
        },
        "supported_formats": ["CSV", "SQL", "Database URL"],
        "supported_databases": ["MySQL", "PostgreSQL", "SQLite", "SQL Server", "Oracle"],
        "connection_types": ["File Upload", "Database URL"],
        "ai_provider": "Google Gemini",
        "documentation": "/docs"
    }


@app.get("/health")
async def health_check():
    """
    Endpoint de verifica√ß√£o de sa√∫de da aplica√ß√£o
    """
    try:
        # Verifica se o Gemini est√° configurado
        gemini_status = gemini_analyzer.check_connection()
        
        return {
            "status": "healthy" if gemini_status else "warning",
            "services": {
                "api": "online",
                "gemini": "configured" if gemini_status else "not_configured",
                "temp_directory": "available" if TEMP_DIR.exists() else "unavailable"
            },
            "message": "Aplica√ß√£o funcionando normalmente" if gemini_status else "Gemini API n√£o configurada"
        }
    except Exception as e:
        logger.error(f"Erro no health check: {e}")
        return {
            "status": "error",
            "services": {
                "api": "online",
                "gemini": "error",
                "temp_directory": "unknown"
            },
            "error": str(e)
        }


@app.post("/upload")
async def upload_and_analyze(file: UploadFile = File(...)):
    """
    Endpoint para upload de arquivo e an√°lise com Gemini
    
    Args:
        file: Arquivo CSV ou SQL via multipart/form-data
    
    Returns:
        JSON com an√°lise completa dos dados usando Gemini
    """
    
    # Log do in√≠cio da requisi√ß√£o
    logger.info(f"üì§ Upload iniciado: {file.filename}")
    
    try:
        # 1. Valida√ß√µes iniciais
        if not file.filename:
            raise HTTPException(status_code=400, detail="Nome do arquivo √© obrigat√≥rio")
        
        if file.size and file.size > 50 * 1024 * 1024:  # 50MB
            raise HTTPException(status_code=413, detail="Arquivo muito grande (m√°ximo 50MB)")
        
        file_extension = Path(file.filename).suffix.lower()
        if file_extension not in ['.csv', '.sql']:
            raise HTTPException(
                status_code=400, 
                detail=f"Formato de arquivo n√£o suportado: {file_extension}. Use .csv ou .sql"
            )
        
        # 2. Salva arquivo temporariamente
        temp_file_path = TEMP_DIR / file.filename
        
        try:
            with open(temp_file_path, "wb") as buffer:
                content = await file.read()
                buffer.write(content)
            
            logger.info(f"üìÅ Arquivo salvo: {temp_file_path} ({len(content)} bytes)")
            
        except Exception as e:
            logger.error(f"Erro ao salvar arquivo: {e}")
            raise HTTPException(status_code=500, detail="Erro ao salvar arquivo")
        
        # 3. Processa os dados
        try:
            processed_data = data_processor.process_file(temp_file_path)
            logger.info(f"üìä Dados processados: {processed_data['info']}")
            
        except Exception as e:
            logger.error(f"Erro ao processar dados: {e}")
            raise HTTPException(status_code=400, detail=f"Erro ao processar dados: {str(e)}")
        
        # 4. An√°lise com Gemini
        try:
            gemini_analysis = await gemini_analyzer.analyze_data(
                data_content=processed_data['content'],
                data_info=processed_data['info'],
                file_type=file_extension[1:]  # Remove o ponto da extens√£o
            )
            logger.info("ü§ñ An√°lise Gemini conclu√≠da")
            
        except Exception as e:
            logger.error(f"Erro na an√°lise Gemini: {e}")
            raise HTTPException(status_code=500, detail=f"Erro na an√°lise com IA: {str(e)}")
        
        # 5. Preparar resposta
        response = {
            "success": True,
            "message": "An√°lise conclu√≠da com sucesso",
            "file_info": {
                "filename": file.filename,
                "size": len(content),
                "type": file_extension[1:],
                "processed_at": processed_data['info'].get('processed_at')
            },
            "data_summary": processed_data['info'],
            "gemini_response": gemini_analysis['gemini_response'],
            "processing_time": gemini_analysis.get('processing_time', 0),
            "model_used": gemini_analysis.get('model_used', 'gemini-2.5-flash-lite'),
            "analyzed_at": gemini_analysis.get('analyzed_at')
        }
        
        logger.info(f"‚úÖ An√°lise conclu√≠da para: {file.filename}")
        return JSONResponse(content=response)
        
    except HTTPException:
        # Re-levanta HTTPExceptions (erros de valida√ß√£o)
        raise
        
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")
        
    finally:
        # 6. Limpeza: remove arquivo tempor√°rio
        try:
            if temp_file_path.exists():
                temp_file_path.unlink()
                logger.info(f"üóëÔ∏è Arquivo tempor√°rio removido: {temp_file_path}")
        except Exception as e:
            logger.warning(f"Aviso: Erro ao remover arquivo tempor√°rio: {e}")


@app.post("/analyze-database")
async def analyze_database(request: DatabaseConnectionRequest = Body(...)):
    """
    Endpoint para an√°lise de dados via conex√£o direta com base de dados
    
    Args:
        request: Dados da requisi√ß√£o contendo apenas a URL da base de dados
    
    Returns:
        JSON com an√°lise completa dos dados usando Gemini
        
    Example:
        POST /analyze-database
        {
            "database_url": "postgresql://user:password@host:port/database"
        }
    """
    
    # Log do in√≠cio da requisi√ß√£o
    logger.info(f"üóÑÔ∏è An√°lise de base de dados iniciada: {request.database_url}")
    
    try:
        db_connector = DatabaseConnector()
        
        # 1. Conecta √† base de dados
        try:
            connection_info = db_connector.connect_to_database(request.database_url)
            logger.info(f"üîó Conectado √† {connection_info['database_type']}")
            
        except Exception as e:
            logger.error(f"Erro na conex√£o: {e}")
            raise HTTPException(status_code=400, detail=f"Erro de conex√£o com a base de dados: {str(e)}")
        
        # 2. Extrai dados da base de dados (usando valores padr√£o)
        try:
            # Extrai dados de amostra das tabelas com limite padr√£o de 1000 registros
            logger.info(f"üìä Extraindo dados de amostra...")
            sample_data = db_connector.extract_sample_data(limit=1000)
            
            logger.info(f"üìã Dados extra√≠dos: {sample_data['tables_processed']} tabelas, {sample_data['total_records']} registros")
            
        except Exception as e:
            logger.error(f"Erro na extra√ß√£o de dados: {e}")
            raise HTTPException(status_code=400, detail=f"Erro ao extrair dados: {str(e)}")
        
        # 3. Prepara dados para an√°lise
        try:
            data_content = db_connector.prepare_data_for_analysis(sample_data)
            logger.info("üìù Dados preparados para an√°lise com Gemini")
            
        except Exception as e:
            logger.error(f"Erro ao preparar dados: {e}")
            raise HTTPException(status_code=500, detail=f"Erro ao preparar dados: {str(e)}")
        
        # 4. An√°lise com Gemini
        try:
            gemini_analysis = await gemini_analyzer.analyze_data(
                data_content=data_content,
                data_info=sample_data,
                file_type="database"
            )
            logger.info("ü§ñ An√°lise Gemini conclu√≠da")
            
        except Exception as e:
            logger.error(f"Erro na an√°lise Gemini: {e}")
            raise HTTPException(status_code=500, detail=f"Erro na an√°lise com IA: {str(e)}")
        
        # 5. Preparar resposta
        response = {
            "success": True,
            "message": "An√°lise de base de dados conclu√≠da com sucesso",
            "source_type": "database",
            "source_info": {
                "database_type": connection_info["database_type"],
                "host": connection_info["host"],
                "database": connection_info.get("database"),
                "connected_at": connection_info["connected_at"],
                "sample_limit": 1000
            },
            "data_summary": {
                "tables_processed": sample_data["tables_processed"],
                "total_records": sample_data["total_records"],
                "extraction_method": "table_sampling",
                "extracted_at": sample_data["extracted_at"]
            },
            "gemini_response": gemini_analysis['gemini_response'],
            "processing_time": gemini_analysis.get('processing_time', 0),
            "model_used": gemini_analysis.get('model_used', 'gemini-2.5-flash-lite'),
            "analyzed_at": gemini_analysis.get('analyzed_at')
        }
        
        logger.info(f"‚úÖ An√°lise de base de dados conclu√≠da")
        return JSONResponse(content=response)
        
    except HTTPException:
        # Re-levanta HTTPExceptions (erros de valida√ß√£o)
        raise
        
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado na an√°lise de base de dados: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")
        
    finally:
        # 6. Fecha conex√£o com a base de dados
        try:
            db_connector.close_connection()
        except Exception as e:
            logger.warning(f"Aviso ao fechar conex√£o: {e}")


@app.post("/specific-insights")
async def get_specific_insights(request: SpecificInsightRequest = Body(...)):
    """
    Endpoint para gerar insights estrat√©gicos espec√≠ficos baseados em solicita√ß√£o
    
    Args:
        request: Dados da requisi√ß√£o contendo URL da base de dados e solicita√ß√£o de insight
    
    Returns:
        JSON com insights estrat√©gicos espec√≠ficos usando Gemini
        
    Examples:
        - "De acordo com os pedidos realizados neste m√™s, me d√™ insights sobre performance de vendas"
        - "Analise o comportamento dos clientes com base nos dados de compras dos √∫ltimos 6 meses"
        - "Quais produtos t√™m melhor margem de lucro e oportunidades de crescimento?"
    """
    
    # Log do in√≠cio da requisi√ß√£o
    logger.info(f"üéØ Solicita√ß√£o de insights espec√≠ficos iniciada")
    logger.info(f"üí≠ Solicita√ß√£o: {request.insight_request[:100]}...")
    
    try:
        db_connector = DatabaseConnector()
        
        # 1. Conecta √† base de dados
        try:
            connection_info = db_connector.connect_to_database(request.database_url)
            logger.info(f"üîó Conectado √† {connection_info['database_type']}")
            
        except Exception as e:
            logger.error(f"Erro na conex√£o: {e}")
            raise HTTPException(status_code=400, detail=f"Erro de conex√£o com a base de dados: {str(e)}")
        
        # 2. Extrai esquema da base de dados
        try:
            logger.info(f"üìã Extraindo esquema da base de dados...")
            database_schema = db_connector.get_database_schema()
            logger.info(f"‚úÖ Esquema extra√≠do: {database_schema['total_tables']} tabelas")
            
        except Exception as e:
            logger.error(f"Erro ao extrair esquema: {e}")
            raise HTTPException(status_code=400, detail=f"Erro ao extrair esquema: {str(e)}")
        
        # 3. Extrai dados de amostra relevantes
        try:
            logger.info(f"üìä Extraindo dados de amostra para an√°lise...")
            sample_data = db_connector.extract_sample_data(limit=1000)
            logger.info(f"‚úÖ Dados extra√≠dos: {sample_data['tables_processed']} tabelas, {sample_data['total_records']} registros")
            
        except Exception as e:
            logger.error(f"Erro na extra√ß√£o de dados: {e}")
            raise HTTPException(status_code=400, detail=f"Erro ao extrair dados: {str(e)}")
        
        # 4. An√°lise de insights espec√≠ficos com Gemini
        try:
            logger.info(f"ü§ñ Gerando insights estrat√©gicos espec√≠ficos...")
            insights_analysis = await gemini_analyzer.analyze_specific_insights(
                database_schema=database_schema,
                sample_data=sample_data,
                insight_request=request.insight_request
            )
            logger.info("‚úÖ Insights estrat√©gicos gerados com sucesso")
            
        except Exception as e:
            logger.error(f"Erro na an√°lise de insights: {e}")
            raise HTTPException(status_code=500, detail=f"Erro na gera√ß√£o de insights: {str(e)}")
        
        # 5. Preparar resposta
        response = {
            "success": True,
            "message": "Insights estrat√©gicos espec√≠ficos gerados com sucesso",
            "insight_request": request.insight_request,
            "database_info": {
                "database_type": connection_info["database_type"],
                "host": connection_info["host"],
                "database": connection_info.get("database"),
                "total_tables": database_schema["total_tables"],
                "tables_analyzed": insights_analysis["tables_analyzed"],
                "records_analyzed": sample_data["total_records"],
                "connected_at": connection_info["connected_at"]
            },
            "strategic_insights": insights_analysis["strategic_insights"],
            "processing_time": insights_analysis["processing_time"],
            "model_used": insights_analysis["model_used"],
            "analyzed_at": insights_analysis["analyzed_at"]
        }
        
        logger.info(f"üéØ Insights espec√≠ficos conclu√≠dos em {insights_analysis['processing_time']:.2f}s")
        return JSONResponse(content=response)
        
    except HTTPException:
        # Re-levanta HTTPExceptions (erros de valida√ß√£o)
        raise
        
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado na gera√ß√£o de insights: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")
        
    finally:
        # 6. Fecha conex√£o com a base de dados
        try:
            db_connector.close_connection()
        except Exception as e:
            logger.warning(f"Aviso ao fechar conex√£o: {e}")


@app.exception_handler(404)
async def not_found_handler(request, exc):
    """Handler personalizado para 404"""
    return JSONResponse(
        status_code=404,
        content={
            "error": "Endpoint n√£o encontrado",
            "message": "Verifique a URL e tente novamente",
            "available_endpoints": ["/", "/upload", "/health", "/docs"]
        }
    )


@app.exception_handler(500)
async def internal_error_handler(request, exc):
    """Handler personalizado para erros 500"""
    logger.error(f"Erro interno do servidor: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erro interno do servidor",
            "message": "Algo deu errado. Tente novamente ou entre em contato com o suporte."
        }
    )


def main():
    """
    Fun√ß√£o principal para inicializar o servidor
    """
    port = int(os.getenv("PORT", 8000))
    host = os.getenv("HOST", "0.0.0.0")
    environment = os.getenv("ENVIRONMENT", "development")
    
    logger.info(f"üöÄ Iniciando SmartBI Assistant v2.0.0")
    logger.info(f"üåê Servidor: http://{host}:{port}")
    logger.info(f"üìö Documenta√ß√£o: http://{host}:{port}/docs")
    logger.info(f"üîß Ambiente: {environment}")
    
    # Configura√ß√µes para desenvolvimento vs produ√ß√£o
    if environment == "development":
        uvicorn.run(
            "main:app",
            host=host,
            port=port,
            reload=True,
            log_level="info"
        )
    else:
        uvicorn.run(
            app,
            host=host,
            port=port,
            log_level="warning"
        )


if __name__ == "__main__":
    main()
